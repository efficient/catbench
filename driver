#!/bin/sh

logging_commence() {
	mkfifo "$prefix.tmp"
	tee "$prefix.log" <"$prefix.tmp" &
	set -v
	exec >"$prefix.tmp" 2>&1 3>&1 4>&2
}

logging_cleanup() {
	set +v
	exec >&3 2>&4
	rm "$prefix.tmp"
}

if [ $# -lt 1 ]
then
	cat <<-tac
		USAGE: $0 <command token>...

		Prepend $0 to the full command-line invokation of another script
		or program to log its environment, invocation, and interactions.

		If shell actions are provided (in escaped form so your own shell
		doesn't eat them, of course), they will be interpreted. To add
		files to the archive, place them in the \\\$dir directory.
	tac
	exit 127
fi

if [ -n "$CATBENCH_JAGFILE" ]
then
	cat >&2 <<-tac
		$0: called recursively!  No mere script should call the great $0!
	tac
	exit 127
fi

prefix="catbench-`basename $1`_`date +%F_%H-%M-%S_%z`"
export CATBENCH_JAGFILE="$prefix.json"
if [ -e "$CATBENCH_JAGFILE" ]
then
	echo "ERROR: Output JSON file already exists; aborting!" >&2
	exit 127
fi

logging_commence

cp jaguar/template.json "$CATBENCH_JAGFILE"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.command "$*"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.commit "`git log --oneline --abbrev-commit --no-decorate -1`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.date "`date "+%F %T %z"`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.message "`git log --no-abbrev-commit --decorate -1`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.patch "`git diff --ignore-submodules HEAD | base64`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.status "`git status -uno`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.submodule "`git submodule status`"
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.uname "`uname -a`"

echo "$ $@"
eval "$@"
status="$?"

logging_cleanup
jaguar/jaguar set "$CATBENCH_JAGFILE" meta.log "`base64 "$prefix.log"`"
rm "$prefix.log"

exit "$status"
