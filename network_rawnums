#!/bin/sh

readonly DATA_POINT_DELIM_REGEX='RUNNING [A-Z]\+:'
readonly            FIELDS_LIST="table_entries round_trip_time"
readonly    SAMPLE_REGEX_CLIENT='.*remote: Completed after: \([0-9]\+\) us.*'
readonly    SAMPLE_REGEX_SERVER='.*Computed in: \([0-9]\+\) us.*'
readonly     SERIES_LIST_CLIENT="baseline contention allocation"
readonly   SERIES_SUFFIX_SERVER="_overhead"

set -e
. ./postprocess.sh

puts() {
	printf '%s\n' "$@"
}

iter_deref() {
	local var="$1"
	eval puts '"$'"$var"'"' | head -n "$iter_window"
}

iter_advance() {
	local var="$1"
	eval "$var='`eval puts '"$'"$var"'"' | tail -n +"$((iter_window + 1))"`'"
}

iter_empty() {
	local logvar="$1"
	[ -z "`iter_deref "$logvar"`" ]
}

copyseries() {
	local serieslist="$1"
	local entryindex="$2"
	local logvar="$3"

	set -e
	for seriesname in $serieslist
	do
		echo -n .
		reuse "data.$seriesname.samples[$entryindex].$independent" integer
		[ "`iter_deref "$logvar" | wc -l`" -eq "$iter_window" ] || { echo "Missing expected number of samples for data point: the log must be missing some entries!" >&2 && false; }
		iter_deref "$logvar" | sed '1i\unstructured\ninteger' | jaguar/jaguar set "$outfile" "data.$seriesname.samples[$entryindex].$dependent" array -
		iter_advance "$logvar"
	done
}

calculateoh() {
	local clientvar="$1"
	local servervar="$2"

	local origlen="`puts "$servervar" | wc -l`"
	set -e
	[ -p allclients ] || mkfifo allclients
	eval puts '"$'"$clientvar"'"' >allclients &
	[ -p allservers ] || mkfifo allservers
	eval puts '"$'"$servervar"'"' >allservers &
	eval "$servervar='`paste -d"-\n" allclients allservers | bc`'"
	rm allclients allservers
	[ "`puts "$servervar" | wc -l`" -eq "$origlen" ]
}

confirm() {
	local msg="$1"
	local approved
	echo -n "$msg (y/N)? "
	read approved
	[ "$approved" = "y" ]
}

[ "`puts "$FIELDS_LIST" | wc -w`" -eq 2 ]
readonly independent="`puts "$FIELDS_LIST" | cut -d" " -f1`"
readonly dependent="`puts "$FIELDS_LIST" | cut -d" " -f2`"
readonly series_list_server="`puts "$SERIES_LIST_CLIENT" | sed "s/ \|$/$SERIES_SUFFIX_SERVER&/g"`"

echo -n "Munging experiment log"

readonly log="`decode log`"
echo -n .
log_client="`puts "$log" | grep -e "$DATA_POINT_DELIM_REGEX" -e "$SAMPLE_REGEX_CLIENT"`"
echo -n .
readonly sample_delims="`puts "$log_client" | grep -n "$DATA_POINT_DELIM_REGEX"`"
echo -n .
readonly series_per_machine="`puts "$SERIES_LIST_CLIENT" | wc -w`"
echo -n .
readonly points_per_series="`puts "$sample_delims" | wc -l | sed '$a\'"$series_per_machine" | paste -sd/ | bc`"
echo -n .
readonly samples_per_point="`puts "$sample_delims" | cut -d: -f1 | tac | head -n2 | sed '$a\1' | paste -sd- | bc`"
echo
iter_window="$samples_per_point"

cat <<-tac

	According to the log, this experiemnt appears to have had the following parameters:
	   Data series:              $((series_per_machine * 2))
	   Series from each machine: $series_per_machine
	   Data points per series:   $points_per_series
	   Samples per data point:   $samples_per_point
tac
confirm "Is this correct" || { echo "Not confirmed; aborting!" >&2 && false; }
echo

echo -n "Classifying log data"
log_client="`puts "$log_client" | sed -n "s/$SAMPLE_REGEX_CLIENT/\1/p"`"
echo -n .
log_server="`puts "$log" | sed -n "s/$SAMPLE_REGEX_SERVER/\1/p"`"
echo -n .
echo

echo -n "Copying legend entries"
for field in $FIELDS_LIST
do
	reuse "legend.samples.$field.description" string
	echo -n .
	reuse "legend.samples.$field.unit" string
	echo -n .
done
echo

echo -n "Copying series labels"
for series in $SERIES_LIST_CLIENT $series_list_server
do
	reuse "data.$series.description" string
	echo -n .
done
echo

echo "Computing network overheads..."
calculateoh log_client log_server

for index in `seq 0 "$((points_per_series - 1))"`
do
	echo -n "Processing record index: $index..."

	echo -n "(client)"
	copyseries "$SERIES_LIST_CLIENT" "$index" log_client

	echo -n "(server)"
	copyseries "$series_list_server" "$index" log_server

	echo
done

{ iter_empty log_client && iter_empty log_server; } || { echo "Extra leftover samples in log: we must have misparsed it!" >&2 && false; }

readonly trash_times="`puts "$log" | grep 'ENDLAP002 rate'`"
if [ -n "$trash_times" ]
then
	trash_records="`puts "$trash_times" | wc -l`"
	readonly num_trash="`echo "$trash_records/$((series_per_machine - 1))/$points_per_series" | bc`"
	unset trash_records
	cat <<-tac

		The log also contains throughput data for this many contending processes: $num_trash
	tac
fi
if [ -n "$num_trash" ] && confirm "Does that look correct, and would you like me to also scrape the stats of each individual contender"
then
	if confirm "Would you also like a breakdown of the nauseating details of each data point"
	then
		trash_subtimes="`puts "$log" | grep 'LAP002.*accesses/s'`"
	fi

	echo
	echo "Copying legend entries..."
	reuse legend.samples.contender_throughput.description string
	reuse legend.samples.contender_throughput.unit string
	iter_window="1"

	for trash in `seq "$num_trash"`
	do
		echo -n "Processing contending process: $trash..."
		this_trash="`puts "$trash_times" | grep "TRASH$trash" | cut -d" " -f5 | paste - -`"
		this_contention="`puts "$this_trash" | cut -f1`"
		this_allocation="`puts "$this_trash" | cut -f2`"
		if [ -n "$trash_subtimes" ]
		then
			this_subtimes="`puts "$trash_subtimes" | grep "TRASH$trash"`"
		fi

		for series in `echo "$SERIES_LIST_CLIENT" | cut -d" " -f2-`
		do
			echo -n "($series)"
			this_desc="`jaguar/jaguar get "$infile" data.${series}_throughput.description | sed -e "s/\(process\)es/\1 $trash/"`"
			jaguar/jaguar set "$outfile" "data.${series}_throughput_$trash.description" string "`puts "$this_desc"`"

			elem="0"
			while bounds "$series" "$elem"
			do
				echo -n .
				reuse "data.${series}_throughput.samples[$elem].table_entries" integer "data.${series}_throughput_$trash.samples[$elem].table_entries"
				jaguar/jaguar set "$outfile" "data.${series}_throughput_$trash.samples[$elem].contender_throughput" fraction "`iter_deref "this_$series"`"
				iter_advance "this_$series"

				if [ -n "$trash_subtimes" ]
				then
					echo -n .
					reuse "data.${series}_throughput.samples[$elem].table_entries" integer "data.${series}_throughputs_$trash.samples[$elem].table_entries"
					jaguar/jaguar set "$outfile" "data.${series}_throughputs_$trash.description" string "`puts "$this_desc breakdown"`"
					sub_subtimes="`puts "$this_subtimes" | sed -n '/ENDLAP/q;p' | cut -d" " -f5 | sed '1i\unstructured\nfraction'`"
					puts "$sub_subtimes" | jaguar/jaguar set "$outfile" "data.${series}_throughputs_$trash.samples[$elem]" array -
					sub_sublines="`puts "$sub_subtimes" | wc -l`"
					this_subtimes="`puts "$this_subtimes" | tail -n+"$sub_sublines"`"
				fi

				elem="$((elem + 1))"
			done
		done
		echo
	done
fi

echo
echo "All done!  Result is in: $outfile"
