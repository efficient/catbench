#!/bin/sh

# Pseudo-modifier for variable declarations.
# Creates a constant with the specified default value, unless a specialization is found in the environment.
const() {
	local varname="`printf %s "$1" | cut -d= -f1`"
	local vardef="`printf %s "$1" | cut -d= -f2-`"
	if eval [ -z '"$'"$varname"'"' ]
	then
		eval "$varname"='"'"$vardef"'"'
	fi
	eval readonly "$varname"
}

const DEFAULT_CLIENT_SLEEP="100000"
const DEFAULT_CLIENT_SLEEP_LOOP="0 10 100 1000 10000 100000"
const DEFAULT_TABLE_ENTRIES="10000"
const DEFAULT_TABLE_ENTRIES_LOOP="1 10 100 1000 10000 100000"
const DEFAULT_CACHE_WAYS="0x003"
const DEFAULT_CACHE_WAYS_LOOP="0x007 0x00f 0x01f 0x03f 0x07f 0x0ff 0x1ff 0x3ff"

const CGROUP_PATH="/sys/fs/cgroup/intel_rdt"
const NUM_TRASH="7"
const PERF_CORES="0"
const TRASH_ALLOC="800"
const WARMUP="600"

usage() {
	cat <<-tac
		USAGE: $0 <-s|-t|-m|-c> <host on which to run client process> <path to repo on remote system> <mac address of local interface on which to listen>

		-s: Vary sleep and fix the number of table entries at $DEFAULT_TABLE_ENTRIES
		-t: Vary number of table entries and fix the sleep at $DEFAULT_CLIENT_SLEEP s
		-m: Vary the number of ways allocated to the mite
		-c: Vary the number of ways allocated to Trash
	tac
}

client_sleep="$DEFAULT_CLIENT_SLEEP"
table_entries="$DEFAULT_TABLE_ENTRIES"
cache_ways="$DEFAULT_CACHE_WAYS"
cache_partition_mite="true"
understood="true"
while "$understood"
do
	case "$1"
	in
		-s)
			independent="client_sleep"
			iterator="$DEFAULT_CLIENT_SLEEP_LOOP"
			;;
		-t)
			independent="table_entries"
			iterator="$DEFAULT_TABLE_ENTRIES_LOOP"
			;;
		-m)
			independent="cache_ways"
			iterator="$DEFAULT_CACHE_WAYS_LOOP"
			;;
		-c)
			cache_partition_mite="false"
			independent="cache_ways"
			iterator="$DEFAULT_CACHE_WAYS_LOOP"
			;;
		*)
			understood="false"
			;;
	esac

	if "$understood"
	then
		shift
	fi
done
if [ -z "$independent" -o $# -ne 3 ]
then
	usage
	exit 1
fi
foreign_client="$1"
remote_path="$2"
local_macaddr="$3"

logfilename="$CATBENCH_JAGFILE"
if [ -z "$logfilename" ]
then
	cat >&2 <<-tac
		$0: should be invoked via driver
	tac
	exit 1
fi

localrev="`git log --no-abbrev-commit --no-decorate -1 | head -n1 | cut -d' ' -f2`"
remoterev="`ssh "$foreign_client" "cd '$remote_path'; git log --no-abbrev-commit --no-decorate -1 | head -n1 | cut -d' ' -f2"`"
if [ "$localrev" != "$remoterev" ]
then
	echo "ERROR: Version mismatch between systems!" >&2
	exit 2
fi

remotemod="`ssh "$foreign_client" "cd '$remote_path'; git diff --exit-code HEAD >/dev/null; echo \\$?"`"
if [ "$remotemod" -ne 0 ]
then
	echo "ERROR: Remote repository state uncommitted!" >&2
	exit 3
fi

sudo killall lockserver-ng 2>/dev/null
sudo killall square_evictions 2>/dev/null

if [ "$independent" = "client_sleep" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.description string "Delay between client requests"
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.unit string "us"
elif [ "$independent" = "table_entries" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.description string "Number of pointers to chase through"
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.unit string ""
elif [ "$independent" = "cache_ways" ]
then
	if "$cache_partition_mite"
	then
		way_description="#ways allocated exclusively to the mite"
	else
		way_description="#ways allocated to contenders (shared with mite)"
	fi
	jaguar/jaguar set "$logfilename" legend.samples.cache_ways.description string "$way_description"
	jaguar/jaguar set "$logfilename" legend.samples.cache_ways.unit string ""
	unset way_description
else
	echo "Internal ERROR, invalid independent variable. (Perhaps you forgot to add a jaguar entry for this independent variable?" >&2
	exit 4
fi

jaguar/jaguar set "$logfilename" legend.samples.mite_throughput.description string "Mite Throughput"
jaguar/jaguar set "$logfilename" legend.samples.mite_throughput.unit string "mops"

jaguar/jaguar set "$logfilename" legend.samples.mean.description string "Mean RTT"
jaguar/jaguar set "$logfilename" legend.samples.mean.unit string "us"

jaguar/jaguar set "$logfilename" legend.samples.999_tail_latency.description string "99.9th percentile tail RTT"
jaguar/jaguar set "$logfilename" legend.samples.999_tail_latency.unit string "us"

jaguar/jaguar set "$logfilename" legend.samples.99_tail_latency.description string "99th percentile tail RTT"
jaguar/jaguar set "$logfilename" legend.samples.99_tail_latency.unit string "us"

jaguar/jaguar set "$logfilename" legend.samples.95_tail_latency.description string "95th percentile tail RTT"
jaguar/jaguar set "$logfilename" legend.samples.95_tail_latency.unit string "us"

jaguar/jaguar set "$logfilename" legend.samples.perf_data.description string "Perf datafile"
jaguar/jaguar set "$logfilename" legend.samples.perf_data.unit string "all ur base64s are belong to me"

base64 -w0 clients/lockserver-ng | jaguar/jaguar set "$logfilename" meta.server_binary string -

extractavelatency() {
	grep -F 'Average:' rtt_client | cut -d" " -f2
}

extractalllatencies() {
	grep -F 'Completed after:' rtt_client | cut -d" " -f3
}

extracttaillatency() {
	entries="$1"
	percentile="$2"

	sed -n "`echo "$entries * $percentile / 100" | bc`{p;q}"
}

setdefaultmask() {
	groupname="$1"
	groupmask="$2"

	sudo mkdir "$CGROUP_PATH/$groupname"
	sudo sh -c "echo '$groupmask' >'$CGROUP_PATH/$groupname/intel_rdt.l3_cbm'"
	sudo sh -c "echo $$ >'$CGROUP_PATH/$groupname/tasks'"
}

unsetmask() {
	sudo sh -c "echo $$ >'$CGROUP_PATH/tasks'"
}

countfreepages() {
	sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo
}

waitforalloc() {
	numpages="$1"
	# Wait for the number of free hugepages to drop.
	orig="`countfreepages`"
	while [ "`countfreepages`" -eq "$orig" -a "$orig" -ne "$numpages" ]; do :; done

	# Now wait for it to stabilize!
	while [ "`sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo`" -ne "$orig" ]
	do
		orig="`countfreepages`"
		sleep 1
	done
}

waitforexit() {
	arg0="$1"
	while (ps -eo args | cut -d" " -f1 | grep -x "$arg0" >/dev/null 2>&1); do :; done
}

runtrial() {
	entries="$1"
	contenders="0"
	if [ -n "$2" ]
	then
		contenders="$2"
	fi
	mask="$3"

	if [ -n "$mask" ] && "$cache_partition_mite"
	then
		echo "NETWORK_RTT: Setting mask to $mask..."
		setdefaultmask lockserver "$mask"
	fi
	echo "NETWORK_RTT: Spawning server..."
	sudo clients/lockserver-ng -l "$entries" -- -c 0x1 >rtt_server &
	waitforalloc 0

	if [ "$contenders" -ne 0 -a -n "$mask" ]
	then
		if "$cache_partition_mite"
		then
			trashmask="`printf '%#x\n' $((0xfffff - mask))`"
		else
			trashmask="$mask"
		fi
		echo "NETWORK_RTT: Setting mask to $trashmask..."
		setdefaultmask trash "$trashmask"
		unset trashmask
	fi
	for contender in `seq "$contenders"`
	do
		echo "NETWORK_RTT: Spawning contender $((contender - 1))"
		taskset "`printf '%#x' $((1 << ($(grep -m2 "physical id" /proc/cpuinfo | uniq | wc -l) * contender)))`" clients/square_evictions -c "$TRASH_ALLOC" -e "$TRASH_ALLOC" -uhr >/dev/null &
	done

	if [ -n "$mask" ]
	then
		echo "NETWORK_RTT: Unsetting mask..."
		unsetmask
	fi
	./onmycommand ./cacheperf "$PERF_CORES" >rtt_perf_duration &
	echo "NETWORK_RTT: Spawning client..."
	echo "No need to enter your password at this prompt!"
	ssh "$foreign_client" "echo '$passwd' | sudo -S '$remote_path/clients/lockclient' -m '$local_macaddr' -s '$client_sleep' | tee '$remote_path/rtt_client' | grep -F --line-buffered 'Initialization complete!'" | ( grep -Fm1 "Initialization complete!" && killall -USR1 onmycommand && cat ) >/dev/null
	./cacheperf end >rtt_perf
	killall onmycommand
	sudo killall lockserver-ng
	waitforexit clients/lockserver-ng
	cat rtt_server >>"$CATBENCH_LOGFILE"

	echo "NETWORK_RTT: Cleaning up..."
	killall square_evictions
	if [ -n "$mask" ]
	then
		sudo cgdelete intel_rdt:lockserver
		sudo cgdelete intel_rdt:trash
	fi
	scp -C "$foreign_client:$remote_path/rtt_client" .
	sed 's/^/remote: /' rtt_client >>"$CATBENCH_LOGFILE"
	cat rtt_perf_duration >>"$CATBENCH_LOGFILE"
	cat rtt_perf >>"$CATBENCH_LOGFILE"
}

recordtrial() {
	var="$1"
	shift

	runtrial "$@"
	tput="0.0"
	avg="`extractavelatency`"
	all="`extractalllatencies | tail -n+"$((WARMUP + 1))" | sort -n`"
	ct="`wc -l <<-cw | cut -d" " -f1
			$all
		cw`"
	rtt_999="`extracttaillatency "$ct" 99.9 <<-ycnetalliattcartxe
			$all
		ycnetalliattcartxe`"
	rtt_99="`extracttaillatency "$ct" 99 <<-ycnetalliattcartxe
			$all
		ycnetalliattcartxe`"
	rtt_95="`extracttaillatency "$ct" 95 <<-ycnetalliattcartxe
			$all
		ycnetalliattcartxe`"
	if [ -z "$header" ]
	then
		if [ "$independent" = "cache_ways" ]
		then
			header="string"
		else
			header="fraction"
		fi
		header="$header,fraction,fraction,fraction,fraction,fraction,string,`cut -f1 rtt_perf | sed "s/.*/fraction/" | paste -sd,`\n$independent,mite_throughput,mean,999tail-latency,99tail-latency,95tail-latency,perf_data,`tr "\t" " " <rtt_perf | cut -d" " -f1 | tr "." "/" | paste -sd,`"
		baseline="$header"
		basealloc="$header"
		contention="$header"
		allocation="$header"
	fi

	total_time="`grep -F "seconds time elapsed" rtt_perf_duration | tr -s " " | cut -d" " -f2`"
	echo "$total_time"
	eval $var="\$$var\\\\n\$$independent,\$tput,\$avg,\$rtt_999,\$rtt_99,\$rtt_95,'`base64 -w0 perf.data`',`cut -f2 rtt_perf | tr -d "," | sed "s:\$:/$total_time:" | bc -l | paste -sd,`"
	echo "============================================="
	echo $tput
	echo $avg
	echo $rtt_999
	echo $rtt_99
	echo $rtt_95
	echo "============================================="
}

echo -n "Remote sudo password? "
stty -echo
read passwd
stty echo
echo

estimatetotal() {
	start_time="$1"
	trial_index="$2"
	trial_count="$3"
	current_time="$(date +%s)"
	echo "$(((current_time - start_time) * trial_count / trial_index))"
}

estimateremaining() {
	start_time="$1"
	trial_index="$2"
	trial_count="$3"
	current_time="$(date +%s)"
	echo "$(((current_time - start_time) * (trial_count - trial_index) / trial_index))"
}

formattime() {
	t="$1"
	s="$((t % 60))"
	m="$((t / 60 % 60))"
	h="$((t / 3600))"
	printf "%d:%02d:%02d" "$h" "$m" "$s"
}

printprogress() {
	start_time="$1"
	trial_index="$2"
	trial_count="$3"

	printf "(%d/%d) " "$trial_index" "$trial_count"

	t="`estimatetotal "$@"`"
	formattime "$t"
	echo -n " total; "

	t="`estimateremaining "$@"`"
	formattime "$t"
	echo " left"
}

header=""

jaguar/jaguar set "$logfilename" data.baseline.description string "Baseline"
jaguar/jaguar set "$logfilename" data.basealloc.description string "Basealloc"
jaguar/jaguar set "$logfilename" data.contention.description string "Contention"
jaguar/jaguar set "$logfilename" data.allocation.description string "Allocation"

start_time="$(date +%s)"
trial_index=0
iteration_count=0; for input in $iterator; do iteration_count="$((iteration_count + 1))"; done
trial_count="$((iteration_count * 4))"

sudo -l >/dev/null
for input in $iterator
do
	eval $independent=$input
	eval cat <<-tac

		=================

		RUNNING ITERATION: $input

	tac
	recordtrial baseline "$table_entries"
	trial_index=$((trial_index + 1)); printprogress "$start_time" "$trial_index" "$trial_count"
	eval cat <<-tac

		RUNNING TRIAL: $input basealloc

	tac
	recordtrial basealloc "$table_entries" 0 "$cache_ways"
	trial_index=$((trial_index + 1)); printprogress "$start_time" "$trial_index" "$trial_count"
	eval cat <<-tac

		RUNNING TRIAL: $input contention

	tac
	recordtrial contention "$table_entries" "$NUM_TRASH"
	trial_index=$((trial_index + 1)); printprogress "$start_time" "$trial_index" "$trial_count"
	eval cat <<-tac

		RUNNING TRIAL: $input allocation

	tac
	recordtrial allocation "$table_entries" "$NUM_TRASH" "$cache_ways"
	trial_index=$((trial_index + 1)); printprogress "$start_time" "$trial_index" "$trial_count"
done
echo "$baseline" | jaguar/jaguar set "$logfilename" data.baseline.samples array -
echo "$basealloc" | jaguar/jaguar set "$logfilename" data.basealloc.samples array -
echo "$contention" | jaguar/jaguar set "$logfilename" data.contention.samples array -
echo "$allocation" | jaguar/jaguar set "$logfilename" data.allocation.samples array -
rm rtt_client
rm rtt_server
rm rtt_perf_duration
rm rtt_perf
