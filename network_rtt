#!/bin/sh

readonly DEFAULT_CLIENT_SLEEP="100000"
readonly DEFAULT_CLIENT_SLEEP_LOOP="0 10 100 1000 10000 100000"
readonly DEFAULT_TABLE_ENTRIES="10000"
readonly DEFAULT_TABLE_ENTRIES_LOOP="1 10 100 1000 10000 100000"
readonly DEFAULT_MITE_WAYS="0x003"
readonly DEFAULT_MITE_WAYS_LOOP="0x007 0x00f 0x01f 0x03f 0x07f 0x0ff 0x1ff 0x3ff"

readonly CGROUP_PATH="/sys/fs/cgroup/intel_rdt"
readonly LOCKSERVER_MASK="0x003"
readonly NUM_TRASH="7"
readonly PERF_CORES="0"
readonly TRASH_ALLOC="800"

usage() {
	cat <<-tac
		USAGE: $0 <-s|-t|-m> <host on which to run client process> <path to repo on remote system> <mac address of local interface on which to listen>

		-s: Vary sleep and fix the number of table entries at $DEFAULT_TABLE_ENTRIES
		-t: Vary number of table entries and fix the sleep at $DEFAULT_CLIENT_SLEEP s
		-m: Vary the number of ways allocated to the mite
	tac
}

client_sleep="$DEFAULT_CLIENT_SLEEP"
table_entries="$DEFAULT_TABLE_ENTRIES"
understood="true"
while "$understood"
do
	case "$1"
	in
		-s)
			independent="client_sleep"
			iterator="$DEFAULT_CLIENT_SLEEP_LOOP"
			;;
		-t)
			independent="table_entries"
			iterator="$DEFAULT_TABLE_ENTRIES_LOOP"
			;;
		-m)
			independent="mite_ways"
			iterator="$DEFAULT_MITE_WAYS_LOOP"
			;;
		*)
			understood="false"
			;;
	esac

	if "$understood"
	then
		shift
	fi
done
if [ -z "$independent" -o $# -ne 3 ]
then
	usage
	exit 1
fi
foreign_client="$1"
remote_path="$2"
local_macaddr="$3"

logfilename="$CATBENCH_JAGFILE"
if [ -z "$logfilename" ]
then
	cat >&2 <<-tac
		$0: should be invoked via driver
	tac
	exit 1
fi

localrev="`git log --no-abbrev-commit --no-decorate -1 | head -n1 | cut -d' ' -f2`"
remoterev="`ssh "$foreign_client" "cd '$remote_path'; git log --no-abbrev-commit --no-decorate -1 | head -n1 | cut -d' ' -f2"`"
if [ "$localrev" != "$remoterev" ]
then
	echo "ERROR: Version mismatch between systems!" >&2
	exit 2
fi

remotemod="`ssh "$foreign_client" "cd '$remote_path'; git diff --exit-code HEAD >/dev/null; echo \\$?"`"
if [ "$remotemod" -ne 0 ]
then
	echo "ERROR: Remote repository state uncommitted!" >&2
	exit 3
fi

sudo killall lockserver-ng 2>/dev/null
sudo killall square_evictions 2>/dev/null

if [ "$independent" = "client_sleep" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.description string "Delay between client requests"
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.unit string "us"
elif [ "$independent" = "table_entries" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.description string "Number of pointers to chase through"
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.unit string ""
elif [ "$independent" = "mite_ways" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.mite_ways.description string "#ways allocated exclusively to the mite"
	jaguar/jaguar set "$logfilename" legend.samples.mite_ways.unit string ""
else
	echo "Internal ERROR" >&2
	exit 4
fi
jaguar/jaguar set "$logfilename" legend.samples.round_trip_time.description string "Round trip time from client perspective"
jaguar/jaguar set "$logfilename" legend.samples.round_trip_time.unit string "us"
jaguar/jaguar set "$logfilename" legend.samples.perf_data.description string "Perf datafile"
jaguar/jaguar set "$logfilename" legend.samples.perf_data.unit string "all ur base64s are belong to me"

base64 -w0 clients/lockserver-ng | jaguar/jaguar set "$logfilename" meta.server_binary string -

setdefaultmask() {
	groupname="$1"
	groupmask="$2"

	sudo mkdir "$CGROUP_PATH/$groupname"
	sudo sh -c "echo '$groupmask' >'$CGROUP_PATH/$groupname/intel_rdt.l3_cbm'"
	sudo sh -c "echo $$ >'$CGROUP_PATH/$groupname/tasks'"
}

unsetmask() {
	sudo sh -c "echo $$ >'$CGROUP_PATH/tasks'"
}

countfreepages() {
	sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo
}

waitforalloc() {
	# Wait for the number of free hugepages to drop.
	orig="`countfreepages`"
	while [ "`countfreepages`" -eq "$orig" -a "$orig" -ne "0" ]; do :; done

	# Now wait for it to stabilize!
	while [ "`sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo`" -ne "$orig" ]
	do
		orig="`countfreepages`"
		sleep 1
	done
}

waitforexit() {
	arg0="$1"
	while (ps -eo args | cut -d" " -f1 | grep -x "$arg0" >/dev/null 2>&1); do :; done
}

runtrial() {
	entries="$1"
	contenders="0"
	if [ -n "$2" ]
	then
		contenders="$2"
	fi
	mask="$3"

	if [ -n "$mask" ]
	then
		echo "NETWORK_RTT: Setting mask to $mask..."
		setdefaultmask lockserver "$mask"
	fi
	echo "NETWORK_RTT: Spawning server..."
	sudo clients/lockserver-ng -l "$entries" -- -c 0x1 >rtt_server &
	waitforalloc

	if [ "$contenders" -ne 0 -a -n "$mask" ]
	then
		invmask="`printf '%#x\n' $((0xfffff - mask))`"
		echo "NETWORK_RTT: Setting mask to $invmask..."
		setdefaultmask trash "$invmask"
	fi
	for contender in `seq "$contenders"`
	do
		echo "NETWORK_RTT: Spawning contender $((contender - 1))"
		taskset "`printf '%#x' $((1 << ($(grep -m2 "physical id" /proc/cpuinfo | uniq | wc -l) * contender)))`" clients/square_evictions -c "$TRASH_ALLOC" -e "$TRASH_ALLOC" -uhr >/dev/null &
	done

	if [ -n "$mask" ]
	then
		echo "NETWORK_RTT: Unsetting mask..."
		unsetmask
	fi
	./onmycommand ./cacheperf "$PERF_CORES" &
	echo "NETWORK_RTT: Spawning client..."
	echo "No need to enter your password at this prompt!"
	ssh "$foreign_client" "echo '$passwd' | sudo -S '$remote_path/clients/lockclient' -m '$local_macaddr' -s '$client_sleep' | tee '$remote_path/rtt_client' | grep -F --line-buffered 'Initialization complete!'" | ( grep -Fm1 "Initialization complete!" && killall -USR1 onmycommand && cat ) >/dev/null
	./cacheperf end
	killall onmycommand
	sudo killall lockserver-ng
	waitforexit clients/lockserver-ng
	cat rtt_server >>"$CATBENCH_LOGFILE"

	echo "NETWORK_RTT: Cleaning up..."
	killall square_evictions
	if [ -n "$mask" ]
	then
		sudo cgdelete intel_rdt:lockserver
		sudo cgdelete intel_rdt:trash
	fi
	scp -C "$foreign_client:$remote_path/rtt_client" .
	sed 's/^/remote: /' rtt_client >>"$CATBENCH_LOGFILE"
}

recordtrial() {
	var="$1"
	shift

	runtrial "$@"
	num="`grep "Average:" rtt_client | cut -d" " -f2`"
	eval $var="\$$var\\\\n\$$independent,\$num,'`base64 -w0 perf.data`'"
}

echo -n "Remote sudo password? "
stty -echo
read passwd
stty echo
echo

header="integer,fraction,string\n$independent,round_trip_time,perf_data"
if [ "$independent" = "mite_ways" ]
then
	header="string,fraction,string\n$independent,round_trip_time,perf_data"
fi
jaguar/jaguar set "$logfilename" data.baseline.description string "Baseline"
jaguar/jaguar set "$logfilename" data.basealloc.description string "Basealloc"
jaguar/jaguar set "$logfilename" data.contention.description string "Contention"
jaguar/jaguar set "$logfilename" data.allocation.description string "Allocation"
baseline="$header"
basealloc="$header"
contention="$header"
allocation="$header"
sudo -l >/dev/null
for input in $iterator
do
	if [ "$independent" != "mite_ways" ]
	then
		mite_ways="$LOCKSERVER_MASK"
	fi
	eval $independent=$input
	eval cat <<-tac

		=================

		RUNNING ITERATION: $input

	tac
	recordtrial baseline "$table_entries"
	eval cat <<-tac

		RUNNING TRIAL: $input basealloc

	tac
	recordtrial basealloc "$table_entries" 0 "$mite_ways"
	eval cat <<-tac

		RUNNING TRIAL: $input contention

	tac
	recordtrial contention "$table_entries" "$NUM_TRASH"
	eval cat <<-tac

		RUNNING TRIAL: $input allocation

	tac
	recordtrial allocation "$table_entries" "$NUM_TRASH" "$mite_ways"
done
echo "$baseline" | jaguar/jaguar set "$logfilename" data.baseline.samples array -
echo "$basealloc" | jaguar/jaguar set "$logfilename" data.basealloc.samples array -
echo "$contention" | jaguar/jaguar set "$logfilename" data.contention.samples array -
echo "$allocation" | jaguar/jaguar set "$logfilename" data.allocation.samples array -
rm rtt_client
rm rtt_server
