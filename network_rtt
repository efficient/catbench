#!/bin/sh

readonly DEFAULT_CLIENT_SLEEP="2000000"
readonly DEFAULT_CLIENT_SLEEP_LOOP="0 10 100 1000 10000 100000"
readonly DEFAULT_TABLE_ENTRIES="10000"
readonly DEFAULT_TABLE_ENTRIES_LOOP="1 10 100 1000 10000 100000"

readonly CGROUP_PATH="/sys/fs/cgroup/intel_rdt"
readonly LOCKSERVER_MASK="0x003"
readonly NUM_TRASH="7"
readonly TRASH_ALLOC="800"

usage() {
	cat <<-tac
		USAGE: $0 <-s|-t> <host on which to run client process> <path to repo on remote system> <mac address of local interface on which to listen>

		-s: Vary sleep and fix the number of table entries at $DEFAULT_TABLE_ENTRIES
		-t: Vary number of table entries and fix the sleep at $DEFAULT_CLIENT_SLEEP s
	tac
}

client_sleep="$DEFAULT_CLIENT_SLEEP"
table_entries="$DEFAULT_TABLE_ENTRIES"
understood="true"
while "$understood"
do
	case "$1"
	in
		-s)
			independent="client_sleep"
			iterator="$DEFAULT_CLIENT_SLEEP_LOOP"
			;;
		-t)
			independent="table_entries"
			iterator="$DEFAULT_TABLE_ENTRIES_LOOP"
			;;
		*)
			understood="false"
			;;
	esac

	if "$understood"
	then
		shift
	fi
done
if [ -z "$independent" -o $# -ne 3 ]
then
	usage
	exit 1
fi
foreign_client="$1"
remote_path="$2"
local_macaddr="$3"

logfilename="$CATBENCH_JAGFILE"
if [ -z "$logfilename" ]
then
	cat >&2 <<-tac
		$0: should be invoked via driver
	tac
	exit 1
fi

localrev="`git log --no-abbrev-commit -1 | head -n1 | cut -d' ' -f2`"
remoterev="`ssh "$foreign_client" "cd '$remote_path'; git log --no-abbrev-commit -1 | head -n1 | cut -d' ' -f2"`"
if [ "$localrev" != "$remoterev" ]
then
	echo "ERROR: Version mismatch between systems!" >&2
	exit 2
fi

remotemod="`ssh "$foreign_client" "cd '$remote_path'; git diff --exit-code HEAD >/dev/null; echo \\$?"`"
if [ "$remotemod" -ne 0 ]
then
	echo "ERROR: Remote repository state uncommitted!" >&2
	exit 3
fi

if [ "$independent" = "client_sleep" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.description string "Delay between client requests"
	jaguar/jaguar set "$logfilename" legend.samples.client_sleep.unit string "us"
elif [ "$independent" = "table_entries" ]
then
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.description string "Number of pointers to chase through"
	jaguar/jaguar set "$logfilename" legend.samples.table_entries.unit string ""
else
	echo "Internal ERROR" >&2
	exit 4
fi
jaguar/jaguar set "$logfilename" legend.samples.round_trip_time.description string "Round trip time from client perspective"
jaguar/jaguar set "$logfilename" legend.samples.round_trip_time.unit string "us"

setdefaultmask() {
	groupname="$1"
	groupmask="$2"

	sudo mkdir "$CGROUP_PATH/$groupname"
	sudo sh -c "echo '$groupmask' >'$CGROUP_PATH/$groupname/intel_rdt.l3_cbm'"
	sudo sh -c "echo $$ >'$CGROUP_PATH/$groupname/tasks'"
}

unsetmask() {
	sudo sh -c "echo $$ >'$CGROUP_PATH/tasks'"
}

countfreepages() {
	sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo
}

waitforalloc() {
	# Wait for the number of free hugepages to drop.
	orig="`countfreepages`"
	while [ "`countfreepages`" -eq "$orig" ]; do :; done

	# Now wait for it to stabilize!
	while [ "`sed -n 's/HugePages_Free:[[:space:]]\+\([[:digit:]]\)/\1/p' /proc/meminfo`" -ne "$orig" ]
	do
		orig="`countfreepages`"
		sleep 1
	done
}

waitforexit() {
	arg0="$1"
	while (ps -eo args | cut -d" " -f1 | grep -x "$arg0" >/dev/null 2>&1); do :; done
}

runtrial() {
	entries="$1"
	contenders="0"
	if [ -n "$2" ]
	then
		contenders="$2"
	fi
	mask="$3"

	if [ -n "$mask" ]
	then
		echo "NETWORK_RTT: Setting mask to $mask..."
		setdefaultmask lockserver "$mask"
	fi
	echo "NETWORK_RTT: Spawning server..."
	( sudo clients/lockserver-ng -l "$entries" >rtt_server ) &
	waitforalloc

	if [ "$contenders" -ne 0 -a -n "$mask" ]
	then
		invmask="`printf '%#x\n' $((0xff - mask))`"
		echo "NETWORK_RTT: Setting mask to $invmask..."
		setdefaultmask trash "$invmask"
	fi
	for contender in `seq "$contenders"`
	do
		echo "NETWORK_RTT: Spawning contender $((contender - 1))"
		clients/square_evictions -c "$TRASH_ALLOC" -e "$TRASH_ALLOC" -uhr >/dev/null &
	done

	if [ -n "$mask" ]
	then
		echo "NETWORK_RTT: Unsetting mask..."
		unsetmask
	fi
	echo "NETWORK_RTT: Spawning client..."
	echo "No need to enter your password at this prompt!"
	ssh "$foreign_client" "echo '$passwd' | sudo -S '$remote_path/clients/lockclient' -m '$local_macaddr' -s '$client_sleep'" | sed -ue '/^EAL: /d' -e 's/^/remote: /' | tee rtt_client
	cat rtt_server

	echo "NETWORK_RTT: Cleaning up..."
	killall square_evictions
	sudo killall lockserver-ng
	waitforexit clients/lockserver-ng
	if [ -n "$mask" ]
	then
		sudo cgdelete intel_rdt:lockserver
		sudo cgdelete intel_rdt:trash
	fi
}

recordtrial() {
	var="$1"
	shift

	runtrial "$@"
	num="`grep "Average:" rtt_client | cut -d" " -f3`"
	oh="`grep "Average:" rtt_server | cut -d" " -f2`"
	num_oh="`echo "$num - $oh" | bc -l`"
	eval $var="\$$var\\\\n\$$independent,\$num"
	eval ${var}_oh="\$${var}_oh\\\\n\$$independent,\$num_oh"
}

echo -n "Remote sudo password? "
stty -echo
read passwd
stty echo
echo

header="integer,fraction\n$independent,round_trip_time"
jaguar/jaguar set "$logfilename" data.baseline.description string "Baseline"
jaguar/jaguar set "$logfilename" data.baseline_overhead.description string "Baseline network delay"
jaguar/jaguar set "$logfilename" data.contention.description string "Contention"
jaguar/jaguar set "$logfilename" data.contention_overhead.description string "Contention network delay"
jaguar/jaguar set "$logfilename" data.allocation.description string "Allocation"
jaguar/jaguar set "$logfilename" data.allocation_overhead.description string "Allocation network delay"
baseline="$header"
baseline_oh="$header"
contention="$header"
contention_oh="$header"
allocation="$header"
allocation_oh="$header"
sudo -l >/dev/null
for input in $iterator
do
	eval $independent=$input
	eval cat <<-tac

		=================

		RUNNING ITERATION: $independent

	tac
	recordtrial baseline "$table_entries"
	eval cat <<-tac

		RUNNING TRIAL: $independent contention

	tac
	recordtrial contention "$table_entries" "$NUM_TRASH"
	eval cat <<-tac

		RUNNING TRIAL: $independent allocation

	tac
	recordtrial allocation "$table_entries" "$NUM_TRASH" "$LOCKSERVER_MASK"
done
echo "$baseline" | jaguar/jaguar set "$logfilename" data.baseline.samples array -
echo "$baseline_oh" | jaguar/jaguar set "$logfilename" data.baseline_overhead.samples array -
echo "$contention" | jaguar/jaguar set "$logfilename" data.contention.samples array -
echo "$contention_oh" | jaguar/jaguar set "$logfilename" data.contention_overhead.samples array -
echo "$allocation" | jaguar/jaguar set "$logfilename" data.allocation.samples array -
echo "$allocation_oh" | jaguar/jaguar set "$logfilename" data.allocation_overhead.samples array -
rm rtt_client
rm rtt_server
