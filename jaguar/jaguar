#!/usr/bin/python3

from collections import namedtuple
from json import dump, JSONDecodeError, load
from re import match, split
from sys import argv, exit, stderr, stdin

def main():
	if len(argv) < 2:
		usage()

	Action = namedtuple("Action", "cmd minargs maxargs reads writes")
	act = {
		'get':  Action(get,   1, 1, True,  False),
		'help': Action(usage, 0, 0, False, False),
		'init': Action(init,  0, 0, False, True),
		'rem':  Action(rem,   1, 1, True,  True),
		'set':  Action(set,   2, 3, True,  True),
	}.get(argv[1], Action(usage, 0, 0, False, False));

	structured = None
	if act.cmd != usage:
		if len(argv) < 3:
			print('You must specify a filename.', file = stderr)
			usage()

		if len(argv) - 3 < act.minargs:
			print('Action \'{}\' expects at least {} arguments after filename'.format(argv[1], act.minargs), file = stderr)
			usage()
		elif len(argv) - 3 > act.maxargs:
			print('Action \'{}\' expects at most {} arguments after filename'.format(argv[1], act.maxargs), file = stderr)
			usage()

		if act.reads:
			try:
				file = open(argv[2], 'r')
				structured = load(file)
			except OSError:
				print('Unable to open file \'{}\''.format(argv[2]), file = stderr)
				exit(1)
			except JSONDecodeError as ex:
				print(ex, file = stderr)
				file.close()
				exit(1)
			file.close()

	save = act.cmd(structured, argv[3:])

	if act.writes:
		try:
			file = open(argv[2], 'w')
			dump(save, file, indent = '\t', sort_keys = True)
			print('', file = file)
		except OSError:
			print('Unable to open file \'{}\' for writing'.format(argv[2]), file = stderr)
			exit(1)
		file.close()

def init(parsed, args):
	return {}

def get(parsed, args):
	print(pathlookup(parsed, args[0]))

def set(parsed, args):
	key = args[0]
	val = args[1]
	typ = None
	if len(args) == 3:
		val = args[2]
		typ = parse_type(args[1])

	pathlookup(parsed, key, val, typ)
	return parsed

def rem(parsed, args):
	try:
		container = pathlookup(parsed, args[0], skiplast = 1)
		subscript = indexfromsubscript(subscriptsfrompath(args[0])[-1])
		del container[subscript]
		return parsed
	except ValueError:
		print('Ill-formatted path basename', file = stderr)
		exit(1)

def usage(parsed = None, args = None):
	print('USAGE: {} <command> <filename> [argument]...'.format(argv[0]))
	exit(1)

def stringorstdin(string):
	if string != '-':
		return string

	return stdin.read()

def dontpackunstructured(ignorekeys, values):
	if len(values) > 1:
		print('Unstructured means precisely that, so there shouldn\'t be multiple columns here!', file = stderr)
		exit(1)
	return values[0]

def actuallypackstructured(keys, values):
	return dict(zip(keys, values))

def arrayfromcsv(fname):
	fd = stdin
	if fname != '-':
		try:
			fd = open(fname)
		except OSError:
			print('Unable to open CSV file \'{}\''.format(fname), file = stderr)
			exit(1)

	lines = fd.readlines()
	if fd != stdin:
		fd.close()

	packerupper=actuallypackstructured
	firstvalueline=2
	if lines[0].strip() == 'unstructured':
		packerupper=dontpackunstructured
		firstvalueline = 1
		lines = lines[1:]

	types = list(map(parse_type, lines[0].strip().split(',')))
	if arrayfromcsv in types:
		print('Arrays within arrays?! I\'m afraid I can\'t let you do that, Dave.', file = stderr)
		exit(1)

	keys = lines[1].strip().split(',')
	return [packerupper(keys, (lambda x: [types[idx](x[idx]) for idx in range(len(x))])(line.strip().split(','))) for line in lines[firstvalueline:]]

def parse_type(string):
	try:
		return {
			'string': filtered_type(''),
			'integer': int,
			'fraction': float,
			'boolean': filtered_type(False),
			'array': filtered_type([]),
		}[string]
	except:
		print('Invalid type: must be one of: string, integer, fraction, boolean, array', file = stderr)
		exit(1)

def filtered_type(obj):
	return {
		str: stringorstdin,
		bool: lambda s: True if s.lower() == 'true' or s == '1' else False if s.lower() == 'false' or s == '0' else exec('raise ValueError(\'unable to parse bool\')'),
		list: arrayfromcsv,
	}.get(type(obj), type(obj))

def subscriptsfrompath(pretty):
	return split('\.|\[', pretty)

# Returns int if a (bracket-terminated) list subscript, str if a dict subscript, or throws an exn if invalid.
def indexfromsubscript(token):
	bracketterminated = match('(-?\d*)]', token)
	if not bracketterminated:
		return token
	return int(bracketterminated.group(1))

def elementassignormaybeappend(cont, spot, elem):
	try:
		cont[spot] = elem
	except IndexError:
		if spot > len(cont):
			print('Index cannot be greater than array length of: {}'.format(len(cont)), file = stderr)
			exit(1)
		cont[spot:spot] = [elem]

def pathlookup(parsed, path, replace = None, typ = None, skiplast = 0):
	ref = parsed

	parent = {}
	levels = subscriptsfrompath(path)
	for key in range(len(levels) - skiplast):
		try:
			try:
				subscript = indexfromsubscript(levels[key])
			except ValueError as sad:
				if replace == None or key != len(levels) - 1 or levels[key] != ']':
					raise sad
				oldlen = len(ref)
				typ = filtered_type(ref)
				if typ != arrayfromcsv:
					print('Append syntax [] is only valid for existing array destinations', file = stderr)
					exit(1)
				ref.extend(typ(replace))
				return ref[oldlen:]

			try:
				if replace != None:
					if key == len(levels) - 1:
						if not typ:
							typ = filtered_type(ref[subscript])

						try:
							elementassignormaybeappend(ref, subscript, typ(replace))
						except ValueError:
							print('Unable to convert supplied data (type mismatch for field?)', file = stderr)
							exit(1)
					elif not isinstance(ref[subscript], list) and not isinstance(ref[subscript], dict):
						raise LookupError('TODO: Do this more cleanly.')
				ref = ref[subscript]
			except TypeError: # Tried to deref a scalar
				print('How am I supposed to find the element \'{}\' in a *scalar*?!'.format(subscript), file = stderr)
				exit(1)
			except LookupError: # This node doesn't exist... add it?
				if replace == None:
					print('Element \'{}\' does not exist and not mutating file'.format(subscript), file = stderr)
					exit(1)

				if isinstance(subscript, int): # Node index
					# Expect list
					if not isinstance(parent, list):
						print('Attempted to use brackets on non-list node', file = stderr)
						exit(1)
				elif isinstance(subscript, str): # Node key
					# Expect dict
					if not isinstance(parent, dict):
						print('Attempted to use dot operator on non-map node', file = stderr)
						exit(1)
				else:
					print('BUG!', file = stderr)
					exit(1)

				if not typ:
					print('Type must be specified when adding an altogether new entry', file = stderr)
					exit(1)

				if key != len(levels) - 1: # Adding an intermediate node
					try:
						next_t = type(indexfromsubscript(levels[key + 1]))
					except ValueError:
						print('Ill-formatted path token: \'{}\''.format(levels[key + 1]), file = stderr)
						exit(1)
					if next_t == int: # Node index
						# Add a list
						elementassignormaybeappend(ref, subscript, [])
					elif next_t == str: # Node key
						# Add a dict
						elementassignormaybeappend(ref, subscript, {})
				else: # Adding the specifically requested key-value pair
					try:
						ref[subscript] = typ(replace)
					except ValueError:
						print('Unable to add data to JSON structure (incorrect type specifier?)', file = stderr)
						exit(1)
				ref = ref[subscript]
			parent = ref
		except ValueError: # Syntax error
			print('Ill-formatted path token: \'{}\''.format(levels[key]), file = stderr)
			exit(1)

	return ref

if __name__ == '__main__':
	main()
