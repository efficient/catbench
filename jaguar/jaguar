#!/usr/bin/python3

from collections import namedtuple
from json import dump, JSONDecodeError, load
from re import match, split
from sys import argv, exit, stderr

def main():
	if len(argv) < 2:
		usage()

	Action = namedtuple("Action", "cmd minargs maxargs reads writes")
	act = {
		'get':  Action(get,   1, 1, True,  False),
		'help': Action(usage, 0, 0, False, False),
		'init': Action(init,  0, 0, False, True),
		'set':  Action(set,   2, 2, True,  True),
	}.get(argv[1], Action(usage, 0, 0, False, False));

	structured = None
	if act.cmd != usage:
		if len(argv) < 3:
			print('You must specify a filename.', file = stderr)
			usage()

		if len(argv) - 3 < act.minargs:
			print('Action \'{}\' expects at least {} arguments after filename'.format(argv[1], act.minargs), file = stderr)
			usage()
		elif len(argv) - 3 > act.maxargs:
			print('Action \'{}\' expects at most {} arguments after filename'.format(argv[1], act.maxargs), file = stderr)
			usage()

		if act.reads:
			try:
				file = open(argv[2], 'r')
				structured = load(file)
			except OSError:
				print('Unable to open file \'{}\''.format(argv[2]), file = stderr)
				exit(1)
			except JSONDecodeError as ex:
				print(ex, file = stderr)
				file.close()
				exit(1)
			file.close()

	save = act.cmd(structured, argv[3:])

	if act.writes:
		try:
			file = open(argv[2], 'w')
			dump(save, file, indent = '\t', sort_keys = True)
			print('', file = file)
		except OSError:
			print('Unable to open file \'{}\' for writing'.format(argv[2]), file = stderr)
			exit(1)
		file.close()

def init(parsed, args):
	root = {}
	root['meta'] = {}
	root['legend'] = {'args': {}, 'samples': {}}
	root['data'] = []
	return root

def get(parsed, args):
	print(pathlookup(parsed, args[0]))

def set(parsed, args):
	pathlookup(parsed, args[0], args[1])
	return parsed

# Returns int if a (bracket-terminated) list subscript, str if a dict subscript, or throws an exn if invalid.
def indexfromsubscript(token):
	bracketterminated = match('(\d+)]', token)
	if not bracketterminated:
		return token
	return int(bracketterminated.group(1))

def pathlookup(parsed, path, replace = None):
	ref = parsed

	parent = {}
	levels = split('\.|\[', path)
	for key in range(len(levels)):
		try:
			subscript = indexfromsubscript(levels[key])
			try:
				if replace != None and key == len(levels) - 1:
					ref[subscript] = replace
				ref = ref[subscript]
			except: # This node doesn't exist... add it?
				if replace == None:
					print('Element \'subscript\' does not exist and not mutating file', file = stderr)
					exit(1)

				if isinstance(subscript, int): # Node index
					# Expect list
					if not isinstance(parent, list):
						print('Attempted to use brackets on non-list node', file = stderr)
						exit(1)
				elif isinstance(subscript, str): # Node key
					# Expect dict
					if not isinstance(parent, dict):
						print('Attempted to use dot operator on non-map node', file = stderr)
						exit(1)
				else:
					print('BUG!', file = stderr)
					exit(1)

				ref[subscript] = replace
				ref = ref[subscript]
			parent = ref
		except: # Syntax error
			print('Ill-formatted path token: \'{}\''.format(levels[key]), file = stderr)
			exit(1)

	return ref

def usage():
	print('USAGE: {} <command> <filename> [argument]...'.format(argv[0]))
	exit(1)

if __name__ == '__main__':
	main()
