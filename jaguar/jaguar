#!/usr/bin/python3

from collections import namedtuple
from json import JSONDecodeError, load
from re import match, split
from sys import argv, exit, stderr

def main():
	if len(argv) < 2:
		usage()

	Action = namedtuple("Action", "cmd nargs")
	act = {
		'get':  Action(get, 1),
		'help': Action(usage, 0),
	}.get(argv[1], Action(usage, 0));

	if act.cmd != usage:
		if len(argv) < 3:
			print('You must specify a filename.', file = stderr)
			usage()

		if len(argv) - 3 != act.nargs:
			print('Action \'{}\' expects exactly {} arguments after filename'.format(argv[1], act.nargs), file = stderr)
			usage()

		try:
			file = open(argv[2], 'r')
			structured = load(file)
		except OSError:
			print('Unable to open file \'{}\''.format(argv[2]), file = stderr)
			exit(1)
		except JSONDecodeError as ex:
			print(ex, file = stderr)
			file.close()
			exit(1)
		file.close()

	act.cmd(structured, argv[3:])

def get(parsed, args):
	print(pathlookup(parsed, args[0]))

def pathlookup(parsed, path):
	ref = parsed

	for key in split('\.|\[', path):
		idx = match('(\d+)]', key)
		if idx:
			numb = idx.group(1)
			try:
				ref = ref[int(numb)]
			except:
				print('Bad list index: [{}]'.format(numb), file = stderr)
				exit(1)
		else:
			try:
				ref = ref[key]
			except:
				print('Expected [subscript], not \'{}\''.format(key), file = stderr)
				exit(1)

	return ref

def usage():
	print('USAGE: {} <command> <filename> [argument]...'.format(argv[0]))
	exit(1)

if __name__ == '__main__':
	main()
