#!/bin/sh

if [ $# -ne 2 ]
then
	echo "USAGE: $0 <infile> <outfile>"
	exit 1
fi
infile="$1"
outfile="$2"

if [ ! -e "$infile" ]
then
	echo "$infile: No such file or directory" >&2
	exit 2
fi
if [ -e "$outfile" ]
then
	echo "$outfile: File exists and would be clobbered" >&2
	exit 3
fi

reuse() {
	key="$1"
	type="$2"
	dest="$key"
	if [ $# -ge 3 ]
	then
		dest="$3"
	fi
	jaguar/jaguar set "$outfile" "$dest" "$type" "`jaguar/jaguar get "$infile" "$key"`"
}

sample() {
	name="$1"
	index="$2"
	jaguar/jaguar get "$infile" "data.$name.samples[$index].round_trip_time"
}

cp jaguar/template_postprocessed.json "$outfile"
jaguar/jaguar set "$outfile" meta.origfile "`md5sum "$infile" | cut -d" " -f1`"
reuse legend.samples.table_entries.description string
reuse legend.samples.table_entries.unit string
jaguar/jaguar set "$outfile" legend.samples.slowdown_factor.description string "Resulting slowdown factor"
jaguar/jaguar set "$outfile" legend.samples.slowdown_factor.unit string ""
jaguar/jaguar set "$outfile" data.introducing_contenders.description string "Adding contending processes without CAT"
jaguar/jaguar set "$outfile" data.turning_off_cat.description string "Turning off CAT with contending processes"

elem="0"
while jaguar/jaguar get "$infile" data.baseline.samples[$elem] >/dev/null 2>&1
do
	jaguar/jaguar get "$infile" data.baseline.samples[$elem].table_entries
	reuse data.baseline.samples[$elem].table_entries integer data.introducing_contenders.samples[$elem].table_entries
	reuse data.baseline.samples[$elem].table_entries integer data.turning_off_cat.samples[$elem].table_entries
	introducing_contenders="`echo "$(sample contention "$elem") / $(sample baseline "$elem")" | bc -l`"
	jaguar/jaguar set "$outfile" data.introducing_contenders.samples[$elem].slowdown_factor fraction "$introducing_contenders"
	turning_off_cat="`echo "$(sample contention "$elem") / $(sample allocation "$elem")" | bc -l`"
	jaguar/jaguar set "$outfile" data.turning_off_cat.samples[$elem].slowdown_factor fraction "$turning_off_cat"
	elem=$((elem + 1))
done
