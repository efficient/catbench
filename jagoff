#!/bin/sh

extractfile() {
	local whichkey="$1"
	local filename="$2"

	if [ -e "$filename" ]
	then
		printf "%s\n" "ERROR: $filename: already exists!" >&2
		return 3
	fi
	jaguar/jaguar get "$jagfile" "$whichkey" | base64 -d >"$filename"
}

set -e
if [ $# -lt 2 ]
then
	cat <<-tac
		USAGE: $0 <Jaguar file> <perf.data key> [Perf argument]..."

		Extracts a Perf recording and the binaries it profiles from an experiment datafile,
		fixes paths so that symbols can be resolved regardless of whether it's being run on
		the same machine that ran the experiment and without modifying the experimental
		infrastructure, and launches perf report, optionally with command-line arguments.

		<Jaguar file> probably ends in '.json'.
		<perf.data key> probably ends in '.perf_data'.
		[Perf argument]s are for 'perf report'.
	tac
	exit 2
fi
jagfile="$1"
perfkey="$2"
shift 2

extractfile "$perfkey" perf.data
binaries="`cut -d'"' -f2 "$jagfile" | sed -n 's/\(.*\)_binary$/\1/p' | sort | uniq`"
printf "%s\n" "$binaries" | while read binary
do
	extractfile "meta.${binary}_binary" "$binary"
	pathoffsets="`strings -td perf.data | sed -n "s: *\(.*/.*$binary\)$:\1:p" | cut -d" " -f1`"
	printf "%s\n" "$pathoffsets" | while read pathoffset
	do
		printf "%s\0" "$binary" | dd of=perf.data seek="$pathoffset" bs=1 conv=notrunc 2>/dev/null
	done
done

perf report "$@"

printf "%s\n%s\n" perf.data "$binaries" | while read tmpfile
do
	rm "$tmpfile"
done
